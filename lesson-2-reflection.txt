What happens when you initialize a repository? Why do you need to do it?
在该文件夹下会创建一个.git文件夹，用来存储每个commit的“快照”状态。

How is the staging area different from the working directory and the repository?
What value do you think it offers?
working directory : 存放文件的目录
repository : git管理的仓库
staging area : 用来暂存准备提交的缓存区，在提交之前，可以撤回或更改。也可以追加其他需要提交的文件。
作用：充当一个缓存区的角色，可以在此决定哪些文件需要被最终提交。


How can you use the staging area to make sure you have one commit per logical
change?
使用 git diff来比较working directory和staging area是否为一个逻辑的更改，如果是，则add改更改。
使用 git diff --staged来比较staging area和commit 1是否为一个逻辑的更改，如果是，则commit更改。

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
有时候，你忽然有一些试验性的想法想进行验证，可以创建一个分支来实践这些想法，对分支的修改并不会更改主线的版本。
在未来某时有用时，或许可以将该分支合并到主线中。


How do the diagrams help you visualize the branch structure?
利用图表，可以一目了然地纵览整个提交历史，比如有多少分支，每个分支有多少个节点。有助于理解。


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
将新增的内容合并到一起。图表表明了合并的结果继承自两天分支的所有节点。

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
自动合并：
    优点：节省工作量，不需要手动干预
    缺点：自动合并以每次修改都是有意为前提，即使有未可知的错误，也会被合并顺延下去。
手动合并：
    优点：会让程序员自行判断意图，以消解两个分支之间的冲突
    缺点：需要人工判断，有时情况可能会变得很复杂。